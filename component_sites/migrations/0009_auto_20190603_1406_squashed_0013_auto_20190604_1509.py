# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2019-06-04 20:22
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import wagtail.wagtailcore.models
import wagtail.wagtailimages.models
import wagtail.wagtailsearch.index


def forwards_func(apps, schema_editor):
    wagtail_image_model = apps.get_model('wagtailimages', 'Image')
    component_image_model = apps.get_model('component_sites', 'ComponentImage')
    tagged_item_model = apps.get_model('taggit', 'TaggedItem')
    django_content_type = apps.get_model('contenttypes', 'contenttype')


    images = wagtail_image_model.objects.all()
    new_images = []
    for image in images:
        new_images.append(component_image_model(
            id=image.id,
            title=image.title,
            file=image.file,
            width=image.width,
            height=image.height,
            created_at=image.created_at,
            focal_point_x=image.focal_point_x,
            focal_point_y=image.focal_point_y,
            focal_point_width=image.focal_point_width,
            focal_point_height=image.focal_point_height,
            file_size=image.file_size,
            collection=image.collection,
            uploaded_by_user=image.uploaded_by_user,
        ))

    component_image_model.objects.bulk_create(new_images)

    ct_component_model, created = django_content_type.objects.get_or_create(
        app_label='pages',
        model='componentimage'
    )
    ct_wagtail_model = django_content_type.objects.get(
        app_label='wagtailimages',
        model='image'
    )

    tagged_item_model.objects.filter(
        content_type_id=ct_wagtail_model.id).update(
            content_type_id=ct_component_model.id
    )


def reverse_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    extended_image_model = apps.get_model('pages', 'ExtendedImage')
    tagged_item_model = apps.get_model('taggit', 'TaggedItem')
    django_content_type = apps.get_model('contenttypes', 'contenttype')

    # Move tags from new image model to old wagtail model
    ct_extended_model = django_content_type.objects.get(
        app_label='pages',
        model='extendedimage'
    )
    ct_wagtail_model = django_content_type.objects.get(
        app_label='wagtailimages',
        model='image'
    )

    tagged_item_model.objects.filter(
        content_type_id=ct_extended_model.id).update(
            content_type_id=ct_wagtail_model.id
    )

    # Delete all images created in the new model
    extended_image_model.objects.all().delete()




class Migration(migrations.Migration):

    replaces = [('component_sites', '0009_auto_20190603_1406'), ('component_sites', '0010_auto_20190603_1429'), ('component_sites', '0011_auto_20190603_1436'), ('component_sites', '0012_auto_20190603_1439'), ('component_sites', '0013_auto_20190604_1509')]

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailcore', '0040_page_draft_title'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('component_sites', '0008_auto_20180207_1034'),
    ]

    operations = [
        migrations.CreateModel(
            name='ComponentImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.wagtailimages.models.get_upload_to, verbose_name='file', width_field='width')),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('alt_text', models.TextField(blank=True, default='', max_length=80, verbose_name='Alt Text')),
                ('collection', models.ForeignKey(default=wagtail.wagtailcore.models.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Collection', verbose_name='collection')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.wagtailsearch.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ComponentRendition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_spec', models.CharField(db_index=True, max_length=255)),
                ('file', models.ImageField(height_field='height',
                                           upload_to=wagtail.wagtailimages.models.get_rendition_upload_to,
                                           width_field='width')),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=16)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renditions',
                                            to='component_sites.ComponentImage')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='componentrendition',
            unique_together=set([('image', 'filter_spec', 'focal_point_key')]),
        ),
        migrations.RunPython(forwards_func, reverse_func),

    ]
