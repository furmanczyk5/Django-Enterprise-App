# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2019-07-24 20:31
from __future__ import unicode_literals

import colorful.fields
import component_sites.blocks
from django.db import migrations, models
import django.db.models.deletion
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtailimages.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('myapa', '0027_merge_20190610_1448'),
        ('content', '0024_auto_20190715_1438'),
        ('auth', '0008_alter_user_username_max_length'),
        ('directories', '0004_auto_20190711_1220'),
        ('store', '0017_auto_20190503_1557'),
        ('wagtailcore', '0040_page_draft_title'),
        ('component_sites', '0010_auto_20190605_1406'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppearanceSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', colorful.fields.RGBColorField(blank=True, null=True)),
                ('logo_small', models.ForeignKey(blank=True, help_text='This logo is used for small viewport and favicon', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='component_sites.ComponentImage')),
                ('logo_wide', models.ForeignKey(blank=True, help_text='This wide logo is for the large viewport header', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='component_sites.ComponentImage')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BuildSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('domain', models.CharField(max_length=100)),
                ('env', models.CharField(choices=[('L', 'Local'), ('S', 'Staging'), ('P', 'Production')], default='P', max_length=1)),
                ('type', models.CharField(choices=[('CHAPTER', 'Chapter'), ('DIVISION', 'Division')], max_length=30)),
                ('admin_group', models.ForeignKey(help_text='Group for Site Admins', null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.Group')),
                ('provider', models.ForeignKey(help_text='CM Provider and Site owner', null=True, on_delete=django.db.models.deletion.SET_NULL, to='myapa.Contact')),
            ],
            options={
                'verbose_name_plural': 'Build Settings',
            },
        ),
        migrations.CreateModel(
            name='ProviderSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jobs_post_instruction_code', models.CharField(blank=True, help_text='Job Instructions Code', max_length=255, null=True)),
                ('jobs_submission_category_code', models.CharField(blank=True, help_text='Job Submission Code', max_length=255, null=True)),
                ('additional_contacts', models.ManyToManyField(blank=True, null=True, to='myapa.Contact', verbose_name='Sections')),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='site', to='myapa.Contact')),
                ('directory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='directories.Directory')),
                ('job_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.Product')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='content.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocialMediaSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook', models.CharField(blank=True, help_text='Your Facebook page partial URL', max_length=255, null=True)),
                ('youtube', models.CharField(blank=True, help_text='Your YouTube channel or user account partial URL', max_length=255, null=True)),
                ('twitter', models.CharField(blank=True, help_text='Your Twitter username, without the @', max_length=255, null=True)),
                ('instagram', models.CharField(blank=True, help_text='Your Instagram username, without the @', max_length=255, null=True)),
                ('linkedin', models.CharField(blank=True, help_text='Your LinkedIn page partial URL', max_length=255, null=True)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='chapterhomepage',
            name='additional_content',
            field=wagtail.wagtailcore.fields.StreamField((('video', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('video', wagtail.wagtailcore.blocks.URLBlock(help_text='url for youtube video')), ('link', wagtail.wagtailcore.blocks.StructBlock((('Link_Text', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('Link_URL', wagtail.wagtailcore.blocks.URLBlock()), ('Link_Style', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('REGULAR', 'Regular Link'), ('BUTTON', 'Button'), ('FANCY', 'Fancy Link')])))))))), ('photo_gallery', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('photos', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailimages.blocks.ImageChooserBlock)), ('link', wagtail.wagtailcore.blocks.StructBlock((('Link_Text', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('Link_URL', wagtail.wagtailcore.blocks.URLBlock()), ('Link_Style', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('REGULAR', 'Regular Link'), ('BUTTON', 'Button'), ('FANCY', 'Fancy Link')])))))))), ('image_with_links', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('url', wagtail.wagtailcore.blocks.URLBlock())))), ('listed_links', wagtail.wagtailcore.blocks.ListBlock(component_sites.blocks.LinkBlock)), ('link', wagtail.wagtailcore.blocks.StructBlock((('Link_Text', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('Link_URL', wagtail.wagtailcore.blocks.URLBlock()), ('Link_Style', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('REGULAR', 'Regular Link'), ('BUTTON', 'Button'), ('FANCY', 'Fancy Link')])))))))), ('tiled_images', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('images', wagtail.wagtailcore.blocks.ListBlock(component_sites.blocks.LinkedImageBlock)), ('link', wagtail.wagtailcore.blocks.StructBlock((('Link_Text', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('Link_URL', wagtail.wagtailcore.blocks.URLBlock()), ('Link_Style', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('REGULAR', 'Regular Link'), ('BUTTON', 'Button'), ('FANCY', 'Fancy Link')]))))))))), default=[]),
        ),
        migrations.AlterField(
            model_name='landingpage',
            name='featured_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image'),
        ),
    ]
