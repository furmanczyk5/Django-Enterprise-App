# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2016-12-16 18:25
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    # replaces = [('events', '0001_squashed_0020_event_length_in_minutes'), ('events', '0002_eventreports_fake_field'), ('events', '0004_event_timezone'), ('events', '0005_event_ticket_template')]

    initial = True

    dependencies = [
        # ('myapa', '0001_squashed_0007_auto_20161018_1735'),
        ('myapa', '0001_squashed_0052_auto_20160331_1650'),
        # ('content', '0001_squashed_0012_auto_20161018_1735'),
        ('content', '0001_squashed_0064_auto_20160328_1819'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('content_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.Content')),
                ('user_address_num', models.IntegerField(blank=True, null=True)),
                ('address1', models.CharField(blank=True, max_length=40, null=True)),
                ('address2', models.CharField(blank=True, max_length=40, null=True)),
                ('city', models.CharField(blank=True, max_length=40, null=True)),
                ('state', models.CharField(blank=True, max_length=15, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=10, null=True)),
                ('country', models.CharField(blank=True, max_length=20, null=True)),
                ('event_type', models.CharField(choices=[('EVENT_MULTI', 'Multipart Event'), ('EVENT_SINGLE', 'Single Event'), ('ACTIVITY', 'Activity'), ('COURSE', 'On Demand')], default='EVENT_SINGLE', max_length=50)),
                ('begin_time', models.DateTimeField(blank=True, null=True, verbose_name='begin time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='end time')),
                ('cm_status', models.CharField(choices=[('A', 'Active'), ('I', 'Inactive'), ('P', 'Pending'), ('C', 'Cancelled')], default='A', max_length=5)),
                ('cm_requested', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('cm_approved', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('cm_law_requested', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('cm_law_approved', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('cm_ethics_requested', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('cm_ethics_approved', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('length_in_minutes', models.IntegerField(blank=True, null=True)),
                ('always_on_schedule', models.BooleanField(default=False, help_text="Use to indicate that an activity should be auto-added to an attendee's schedule")),
                ('is_online', models.BooleanField(default=False)),
                ('digital_product_url', models.URLField(blank=True, help_text='link to digital download (e.g. streaming/recording)', max_length=255, null=True)),
                ('is_free', models.BooleanField(default=False)),
                ('price_default', models.DecimalField(blank=True, decimal_places=2, help_text='TO BE DELETED, DO NOT USE', max_digits=6, null=True)),
                ('timezone', models.CharField(blank=True, help_text='The timezone for the location of the event', max_length=50, null=True)),
                ('ticket_template', models.CharField(blank=True, choices=[('registrations/tickets/layouts/CONFERENCE_BADGE.html', 'NPC Conference Badge'), ('registrations/tickets/layouts/EVENT_MULTI.html', 'Chapter Conference Badge')], max_length=100, null=True, verbose_name='badge/ticket template')),
            ],
            options={
                'verbose_name_plural': 'All events, activities, and courses',
                'verbose_name': 'Event/Activity/Course',
                'abstract': False,
            },
            bases=('content.content', models.Model),
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Multipart event activities',
                'proxy': True,
            },
            bases=('events.event',),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
            ],
            options={
                'verbose_name_plural': 'On-demand education',
                'proxy': True,
                'verbose_name': 'On-demand education',
            },
            bases=('events.event',),
        ),
        migrations.CreateModel(
            name='EventMulti',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name': 'Multipart event',
            },
            bases=('events.event',),
        ),
        migrations.CreateModel(
            name='EventSingle',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name': 'Single event',
            },
            bases=('events.event',),
        ),
        migrations.CreateModel(
            name='NationalConferenceParticipant',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name': 'Conference Participant',
            },
            bases=('myapa.contactrole',),
        ),
        migrations.CreateModel(
            name='NationalConferenceActivity',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Conference Activities',
                'proxy': True,
                'verbose_name': 'Conference Activity',
            },
            bases=('events.activity',),
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('myapa.contactrole',),
        ),
        migrations.CreateModel(
            name='EventLogEntry',
            fields=[
                ('contactcontentadded_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myapa.ContactContentAdded')),
                ('cm_verified', models.BooleanField(default=False)),
                ('cm_make_public', models.BooleanField(default=False)),
                ('cm_credits', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('cm_law_credits', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('cm_ethics_credits', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('cm_is_speaker', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'TO DELETE: event logs',
                'verbose_name': 'TO DELETE: event log',
            },
            bases=('myapa.contactcontentadded',),
        ),
        migrations.CreateModel(
            name='SpeakerEval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_understood_audience', models.IntegerField(blank=True, null=True)),
                ('rating_presented_well', models.IntegerField(blank=True, null=True)),
                ('rating_quality_content', models.IntegerField(blank=True, null=True)),
                ('rating_present_again', models.IntegerField(blank=True, null=True)),
                ('contactrole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speakereval', to='myapa.ContactRole')),
                ('event_log_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speakereval', to='events.EventLogEntry')),
            ],
            options={
                'verbose_name': 'Speaker evaluation',
            },
        ),
        migrations.AddField(
            model_name='eventlogentry',
            name='speaker_evals',
            field=models.ManyToManyField(blank=True, null=True, through='events.SpeakerEval', to='myapa.ContactRole'),
        ),
        migrations.CreateModel(
            name='NationalConferenceEval',
            fields=[
            ],
            options={
                'verbose_name': 'Activity evaluation',
                'proxy': True,
            },
            bases=('events.eventlogentry',),
        ),
        migrations.CreateModel(
            name='NationalConferenceProposal',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Conference Proposals',
                'proxy': True,
                'verbose_name': 'Conference Proposal',
            },
            bases=('events.nationalconferenceactivity',),
        ),
        migrations.AlterField(
            model_name='eventlogentry',
            name='speaker_evals',
            field=models.ManyToManyField(blank=True, through='events.SpeakerEval', to='myapa.ContactRole'),
        ),
        # migrations.AddField(
        #     model_name='eventreports',
        #     name='fake_field',
        #     field=models.CharField(blank=True, max_length=200, null=True),
        # ),
        # migrations.AddField(
        #     model_name='event',
        #     name='timezone',
        #     field=models.CharField(blank=True, help_text='The timezone for the location of the event', max_length=50, null=True),
        # ),
        # migrations.AddField(
        #     model_name='event',
        #     name='ticket_template',
        #     field=models.CharField(blank=True, choices=[('registrations/tickets/layouts/CONFERENCE_BADGE.html', 'NPC Conference Badge'), ('registrations/tickets/layouts/EVENT_MULTI.html', 'Chapter Conference Badge')], max_length=100, null=True, verbose_name='badge/ticket template'),
        # ),
    ]
