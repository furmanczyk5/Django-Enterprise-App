# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2016-12-15 22:35
from __future__ import unicode_literals

import content.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    # replaces = [('content', '0001_squashed_0064_auto_20160328_1819'), ('content', '0002_pages'), ('content', '0003_submissions'), ('content', '0004_media'), ('content', '0005_auto_20160519_0250'), ('content', '0006_auto_20160601_2336'), ('content', '0007_auto_20160616_2022'), ('content', '0008_emailtemplate_email_to'), ('content', '0009_auto_20160906_2204'), ('content', '0010_auto_20160913_2106'), ('content', '0011_tagtype_sort_number'), ('content', '0012_auto_20161018_1735')]

    initial = True

    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
        # ('pages', '0001_squashed_0007_auto_20160314_0648'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        # ('submissions', '0001_squashed_0028_auto_20160401_1553'),
        # ('media', '0001_squashed_0004_auto_20160105_2018'),
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('A', 'Active'), ('P', 'Pending'), ('I', 'Inactive'), ('H', 'Hidden'), ('S', 'Staff-Use Only'), ('X', 'Marked for Deletion'), ('N', 'Not Complete'), ('C', 'Complete'), ('CA', 'Cancelled')], default='A', max_length=5, verbose_name='visibility status')),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, help_text='An identifier for the ending of the url - will be auto-generated based on the title for web pages.', null=True)),
                ('created_time', models.DateTimeField(editable=False)),
                ('updated_time', models.DateTimeField(editable=False)),
                ('content_type', models.CharField(choices=[('PAGE', 'Web page'), ('EVENT', 'Events & training'), ('RFP', 'RFP/RFQ'), ('KNOWLEDGEBASE', 'Planning knowledgebase entry'), ('KNOWLEDGEBASE_COLLECTION', 'Planning knowledgebase collection'), ('AWARD', 'Award nomination'), ('RESEARCH_INQUIRY', 'Research inquiry'), ('IMAGE', 'Image library image'), ('MEDIA', 'Resource library media'), ('PRODUCT', 'Other products'), ('PUBLICATION', 'Publication (Article, Book, E-Book)'), ('BLOG', 'Blog post'), ('EXAM', 'Exam application submission'), ('JOB', 'Job ad')], default='PAGE', max_length=50)),
                ('publish_status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('SUBMISSION', 'Submission'), ('EARLY_RESUBMISSION', 'Early Resubmission')], default='DRAFT', max_length=50)),
                ('subtitle', models.CharField(blank=True, max_length=1000, null=True)),
                ('text', models.TextField(blank=True, null=True, verbose_name='Full text/body of content')),
                ('url', models.CharField(blank=True, help_text='The url for the content, starting with "/".', max_length=255, null=True)),
                ('resource_url', models.URLField(blank=True, max_length=255, null=True)),
                ('file_path', models.CharField(blank=True, help_text='the path of the htm file (if content is coming from file instead of db)', max_length=255, null=True)),
                ('has_xhtml', models.BooleanField(default=True)),
                ('publish_time', models.DateTimeField(blank=True, null=True, verbose_name='publish time')),
                ('archive_time', models.DateTimeField(blank=True, null=True, verbose_name='archive time')),
                ('abstract', models.TextField(blank=True, null=True)),
                ('resource_type', models.CharField(blank=True, choices=[('BOOK', 'Book'), ('EBOOK', 'E-Book'), ('ARTICLE', 'Article'), ('REPORT', 'Report'), ('TOOLKIT', 'Toolkit'), ('E_LEARNING', 'E-Learning')], help_text='A subset of the APA format facet, used for publications.', max_length=50, null=True)),
                ('volume_number', models.IntegerField(blank=True, null=True)),
                ('issue_number', models.IntegerField(blank=True, null=True)),
                ('language', models.CharField(blank=True, choices=[('EN', 'English'), ('FR', 'French'), ('ZH', 'Chinese'), ('ES', 'Spanish')], max_length=50, null=True)),
                ('resource_published_date', models.DateField(blank=True, null=True)),
                ('copyright_date', models.DateField(blank=True, null=True)),
                ('copyright_statement', models.CharField(blank=True, max_length=1000, null=True)),
                ('isbn', models.CharField(blank=True, max_length=20, null=True)),
                ('overline', models.CharField(blank=True, max_length=1000, null=True)),
                ('submission_approved_time', models.DateTimeField(blank=True, null=True, verbose_name='approved on')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_content_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_content_updated_by', to=settings.AUTH_USER_MODEL)),
                ('template', models.CharField(blank=True, choices=[('pages/default.html', 'Default web page'), ('cm/newtheme/aicp-page-sidebar.html', 'AICP branded page with sidebar'), ('blog/post.html', 'Blog Post'), ('knowledgebase/collection.html', 'Knowledgebase collection template'), ('knowledgebase/resource.html', 'Knowledgebase resource template'), ('events/newtheme/eventmulti_details.html', 'Multipart event template'), ('events/newtheme/ondemand/course_details.html', 'On-demand template'), ('publications/planning_mag.html', 'Planning Magazine article'), ('pages/research.html', 'Research project'), ('pages/section_overview.html', 'Section overview page'), ('events/newtheme/event_details.html', 'Single event or activity template'), ('pages/landing.html', 'Topic landing page'), ('content/oldtheme/base-details.html', '[Interim conference design template]'), ('content/test_details.html', '[APA test template (for testing only)]'), ('content/landingpage_template.html', '[Old/interim design promo/landing page template]'), ('PAGE', '[Old/interim design template]')], max_length=50, null=True)),
                ('show_content_without_groups', models.BooleanField(default=False, help_text='\n        Enable if content should be displayed (e.g. as marketing material), even if the user does not have the required permission groups.\n        Generally used for media/resources where the media download may be restricted to certain groups, but we always want to show \n        the content text for marketing purposes.\n        ')),
                ('permission_groups', models.ManyToManyField(blank=True, null=True, to='auth.Group')),
                ('content_area', models.CharField(choices=[('NONE', 'Uncategorized pages'), ('MEMBERSHIP', 'Membership'), ('KNOWLEDGE_CENTER', 'Knowledge Center'), ('CONFERENCES', 'Conferences and Meetings'), ('AICP', 'AICP'), ('POLICY', 'Policy and Advocacy'), ('CAREER', 'Career Center'), ('OUTREACH', 'Community Outreach'), ('CONNECT', 'Connect with APA'), ('ABOUT', 'About')], default='NONE', max_length=50)),
                ('editorial_comments', models.CharField(blank=True, help_text='Comments to author', max_length=2550, null=True)),
                ('make_inactive_time', models.DateTimeField(blank=True, null=True, verbose_name='make inactive time')),
                ('make_public_time', models.DateTimeField(blank=True, null=True, verbose_name='make public time')),
                ('workflow_status', models.CharField(choices=[('DRAFT_IN_PROGRESS', 'Draft in progress'), ('NEEDS_REVIEW', 'Needs review'), ('NEEDS_WORK', 'Needs work'), ('APPROVED_TO_PUBLISH', 'Approved to publish'), ('IS_PUBLISHED', 'Published'), ('UNPUBLISHED', 'Unpublished')], default='DRAFT_IN_PROGRESS', help_text='For future use.', max_length=50)),
                ('publish_uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=36, null=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='thumbnail')),
                ('published_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('published_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_content_published_by', to=settings.AUTH_USER_MODEL)),
                ('rating_count', models.IntegerField(blank=True, editable=False, null=True)),
                ('rating_average', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=4, null=True)),
                ('keywords', models.TextField(blank=True, help_text="keywords that users don't see", null=True)),
                ('submission_time', models.DateTimeField(blank=True, null=True, verbose_name='submitted on')),
                ('submission_verified', models.BooleanField(default=False)),
                ('checkin_time', models.DateTimeField(blank=True, null=True)),
                ('checkin_username', models.CharField(blank=True, max_length=10, null=True)),
                ('is_apa', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Content Record',
                'verbose_name_plural': 'All Content Records',
            },
        ),
        migrations.CreateModel(
            name='ContentTagType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contenttagtype', to='content.Content')),
                ('publish_status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('SUBMISSION', 'Submission'), ('EARLY_RESUBMISSION', 'Early Resubmission')], default='DRAFT', max_length=50)),
                ('publish_uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=36, null=True)),
                ('publish_time', models.DateTimeField(blank=True, null=True, verbose_name='publish time')),
                ('published_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_contenttagtype_published_by', to=settings.AUTH_USER_MODEL)),
                ('published_time', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'additional type of tag',
                'verbose_name_plural': 'additional tagging',
            },
        ),
        migrations.CreateModel(
            name='MasterContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_draft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_draft', to='content.Content')),
                ('content_live', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_live', to='content.Content')),
                ('published_time', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContentRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(choices=[('RELATED', 'Related'), ('KNOWLEDGEBASE_COLLECTION', 'Belongs to knowledgebase collection')], max_length=50)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contentrelationship_from', to='content.Content')),
                ('content_master_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contentrelationship_to', to='content.MasterContent')),
                ('publish_status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('SUBMISSION', 'Submission'), ('EARLY_RESUBMISSION', 'Early Resubmission')], default='DRAFT', max_length=50)),
                ('publish_time', models.DateTimeField(blank=True, null=True, verbose_name='publish time')),
                ('publish_uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=36, null=True)),
                ('published_time', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SerialPub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('A', 'Active'), ('P', 'Pending'), ('I', 'Inactive'), ('H', 'Hidden'), ('S', 'Staff-Use Only'), ('X', 'Marked for Deletion'), ('N', 'Not Complete'), ('C', 'Complete'), ('CA', 'Cancelled')], default='A', max_length=5, verbose_name='visibility status')),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, help_text='An identifier for the ending of the url - will be auto-generated based on the title for web pages.', null=True)),
                ('created_time', models.DateTimeField(editable=False)),
                ('updated_time', models.DateTimeField(editable=False)),
                ('issn', models.CharField(blank=True, max_length=50, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_serialpub_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_serialpub_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('A', 'Active'), ('P', 'Pending'), ('I', 'Inactive'), ('H', 'Hidden'), ('S', 'Staff-Use Only'), ('X', 'Marked for Deletion'), ('N', 'Not Complete'), ('C', 'Complete'), ('CA', 'Cancelled')], default='A', max_length=5, verbose_name='visibility status')),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, help_text='An identifier for the ending of the url - will be auto-generated based on the title for web pages.', null=True)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_tag_updated_by', to=settings.AUTH_USER_MODEL)),
                ('created_time', models.DateTimeField(editable=False)),
                ('updated_time', models.DateTimeField(editable=False)),
                ('sort_number', models.IntegerField(blank=True, null=True)),
                ('taxo_term', models.CharField(blank=True, max_length=200, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_tag_created_by', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.Tag')),
                ('related', models.ManyToManyField(blank=True, related_name='_tag_related_+', to='content.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TagType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('A', 'Active'), ('P', 'Pending'), ('I', 'Inactive'), ('H', 'Hidden'), ('S', 'Staff-Use Only'), ('X', 'Marked for Deletion'), ('N', 'Not Complete'), ('C', 'Complete'), ('CA', 'Cancelled')], default='A', max_length=5, verbose_name='visibility status')),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, help_text='An identifier for the ending of the url - will be auto-generated based on the title for web pages.', null=True)),
                ('created_time', models.DateTimeField(editable=False)),
                ('updated_time', models.DateTimeField(editable=False)),
                ('min_allowed', models.IntegerField(blank=True, null=True)),
                ('max_allowed', models.IntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_tagtype_created_by', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.TagType')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_tagtype_updated_by', to=settings.AUTH_USER_MODEL)),
                ('submission_only', models.BooleanField(default=False)),
                ('sort_number', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='tag',
            name='tag_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='content.TagType'),
        ),
        migrations.AddField(
            model_name='contenttagtype',
            name='tag_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contenttagtype', to='content.TagType'),
        ),
        migrations.AddField(
            model_name='contenttagtype',
            name='tags',
            field=models.ManyToManyField(blank=True, to='content.Tag'),
        ),
        migrations.AddField(
            model_name='content',
            name='master',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content', to='content.MasterContent'),
        ),
        migrations.AddField(
            model_name='content',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='content.MasterContent'),
        ),
        migrations.AddField(
            model_name='content',
            name='related',
            field=models.ManyToManyField(blank=True, related_name='related_from', through='content.ContentRelationship', to='content.MasterContent'),
        ),
        migrations.AddField(
            model_name='content',
            name='serial_pub',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.SerialPub'),
        ),
        migrations.AddField(
            model_name='content',
            name='tag_types',
            field=models.ManyToManyField(blank=True, through='content.ContentTagType', to='content.TagType'),
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('A', 'Active'), ('P', 'Pending'), ('I', 'Inactive'), ('H', 'Hidden'), ('S', 'Staff-Use Only'), ('X', 'Marked for Deletion'), ('N', 'Not Complete'), ('C', 'Complete'), ('CA', 'Cancelled')], default='A', max_length=5, verbose_name='visibility status')),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, help_text='An identifier for the ending of the url - will be auto-generated based on the title for web pages.', null=True)),
                ('created_time', models.DateTimeField(editable=False)),
                ('updated_time', models.DateTimeField(editable=False)),
                ('email_from', models.EmailField(max_length=200)),
                ('subject', models.CharField(max_length=200)),
                ('body', models.TextField(help_text='Use {{ }} for passing values.')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_emailtemplate_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_emailtemplate_updated_by', to=settings.AUTH_USER_MODEL)),
                ('email_to', models.EmailField(blank=True, help_text='Will this work with multiple addresses?', max_length=200)),
            ],
            options={
                'verbose_name': 'Email Template',
                'verbose_name_plural': 'Email Templates',
            },
        ),
        migrations.CreateModel(
            name='ContentImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('A', 'Active'), ('P', 'Pending'), ('I', 'Inactive'), ('H', 'Hidden'), ('S', 'Staff-Use Only'), ('X', 'Marked for Deletion'), ('N', 'Not Complete'), ('C', 'Complete'), ('CA', 'Cancelled')], default='A', max_length=5, verbose_name='visibility status')),
                ('slug', models.SlugField(blank=True, help_text='An identifier for the ending of the url - will be auto-generated based on the title for web pages.', null=True)),
                ('created_time', models.DateTimeField(editable=False)),
                ('updated_time', models.DateTimeField(editable=False)),
                ('url', models.CharField(blank=True, help_text='the link if user clicks on image', max_length=255, null=True)),
                ('img', models.CharField(help_text='the relative path to the image', max_length=255)),
                ('image_type', models.CharField(choices=[('BANNER', 'Banner Image'), ('THUMBNAIL', 'Thumbnail')], default='BANNER', max_length=50)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_contentimage_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_contentimage_updated_by', to=settings.AUTH_USER_MODEL)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'TO DELETE: old image model',
                'verbose_name_plural': 'TO DELETE: old image models',
            },
        ),
        migrations.CreateModel(
            name='TaxoTopicTag',
            fields=[
            ],
            options={
                'verbose_name': 'Topic Tagging',
                'proxy': True,
                'verbose_name_plural': 'Topic Tagging',
            },
            bases=('content.tag',),
        ),
        migrations.AddField(
            model_name='content',
            name='taxo_topics',
            field=models.ManyToManyField(blank=True, to='content.TaxoTopicTag'),
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('A', 'Active'), ('P', 'Pending'), ('I', 'Inactive'), ('H', 'Hidden'), ('S', 'Staff-Use Only'), ('X', 'Marked for Deletion'), ('N', 'Not Complete'), ('C', 'Complete'), ('CA', 'Cancelled')], default='A', max_length=5, verbose_name='visibility status')),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, help_text='An identifier for the ending of the url - will be auto-generated based on the title for web pages.', null=True)),
                ('created_time', models.DateTimeField(editable=False)),
                ('updated_time', models.DateTimeField(editable=False)),
                ('url', models.CharField(blank=True, help_text='only if menu item does not point to a specific content record', max_length=255, null=True, verbose_name='custom url')),
                ('sort_number', models.IntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_menuitem_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_menuitem_updated_by', to=settings.AUTH_USER_MODEL)),
                ('master', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.MasterContent', verbose_name='Associated Content')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submenuitems', to='content.MenuItem', verbose_name='parent menu item')),
                ('publish_status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('SUBMISSION', 'Submission'), ('EARLY_RESUBMISSION', 'Early Resubmission')], default='DRAFT', max_length=50)),
                ('publish_time', models.DateTimeField(blank=True, null=True, verbose_name='publish time')),
                ('publish_uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=36, null=True)),
                ('published_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('published_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_menuitem_published_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['sort_number'],
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('published_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('publish_time', models.DateTimeField(blank=True, null=True, verbose_name='publish time')),
                ('publish_status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('SUBMISSION', 'Submission'), ('EARLY_RESUBMISSION', 'Early Resubmission')], default='DRAFT', max_length=50)),
                ('code', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('A', 'Active'), ('P', 'Pending'), ('I', 'Inactive'), ('H', 'Hidden'), ('S', 'Staff-Use Only'), ('X', 'Marked for Deletion'), ('N', 'Not Complete'), ('C', 'Complete'), ('CA', 'Cancelled')], default='A', max_length=5, verbose_name='visibility status')),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, help_text='An identifier for the ending of the url - will be auto-generated based on the title for web pages.', null=True)),
                ('created_time', models.DateTimeField(editable=False)),
                ('updated_time', models.DateTimeField(editable=False)),
                ('searchable', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_section_created_by', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subsections', to='content.Section', verbose_name='parent section')),
                ('published_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_section_published_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_section_updated_by', to=settings.AUTH_USER_MODEL)),
                ('publish_uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=36, null=True)),
                ('url', models.CharField(blank=True, help_text='the url path for the section home... used for the breadcrumb link', max_length=255, null=True)),
                # ('new_landing_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bak_section', to='pages.LandingPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaxoTopicTagFlat',
            fields=[
            ],
            options={
                'verbose_name': 'TaxoTopicTag (Flat)',
                'proxy': True,
                'verbose_name_plural': 'TaxoTopicTags (Flat)',
            },
            bases=('content.tag',),
        ),
        migrations.CreateModel(
            name='MessageText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('published_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('publish_time', models.DateTimeField(blank=True, null=True, verbose_name='publish time')),
                ('publish_status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('SUBMISSION', 'Submission'), ('EARLY_RESUBMISSION', 'Early Resubmission')], default='DRAFT', max_length=50)),
                ('publish_uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=36, null=True)),
                ('code', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('A', 'Active'), ('P', 'Pending'), ('I', 'Inactive'), ('H', 'Hidden'), ('S', 'Staff-Use Only'), ('X', 'Marked for Deletion'), ('N', 'Not Complete'), ('C', 'Complete'), ('CA', 'Cancelled')], default='A', max_length=5, verbose_name='visibility status')),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, help_text='An identifier for the ending of the url - will be auto-generated based on the title for web pages.', null=True)),
                ('created_time', models.DateTimeField(editable=False)),
                ('updated_time', models.DateTimeField(editable=False)),
                ('message_type', models.CharField(choices=[('MESSAGE', 'Erorr/warning/info message'), ('EMBEDDED', 'Message/text embedded in app'), ('TOOLTIP', 'Tooltip popup message')], default='MESSAGE', max_length=50)),
                ('message_level', models.IntegerField(blank=True, choices=[(10, 'DEBUG'), (20, 'INFO'), (25, 'SUCCESS'), (30, 'WARNING'), (40, 'ERROR')], default=20, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_messagetext_created_by', to=settings.AUTH_USER_MODEL)),
                ('published_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_messagetext_published_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_messagetext_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
            },
        ),
        migrations.CreateModel(
            name='CommunityTypeContentTagType',
            fields=[
            ],
            options={
                'verbose_name': 'community type tagging',
                'proxy': True,
                'verbose_name_plural': 'community type tagging',
            },
            bases=('content.contenttagtype',),
        ),
        migrations.CreateModel(
            name='JurisdictionContentTagType',
            fields=[
            ],
            options={
                'verbose_name': 'jurisdiction tagging',
                'proxy': True,
                'verbose_name_plural': 'jurisdiction tagging',
            },
            bases=('content.contenttagtype',),
        ),
        migrations.CreateModel(
            name='ContentTaxoUpload',
            fields=[
            ],
            options={
                'verbose_name': 'XML taxonomy upload',
                'proxy': True,
            },
            bases=('content.content',),
        ),
        migrations.CreateModel(
            name='FormatContentTagType',
            fields=[
            ],
            options={
                'verbose_name': 'format tagging',
                'proxy': True,
                'verbose_name_plural': 'format tagging',
            },
            bases=('content.contenttagtype',),
        ),
        migrations.AddField(
            model_name='content',
            name='section',
            field=models.ForeignKey(blank=True, help_text='DO NOT USE... to be depreciated', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content', to='content.Section'),
        ),
        migrations.AddField(
            model_name='menuitem',
            name='section',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='_menuitems_depreciated', to='content.Section'),
        ),
        migrations.AddField(
            model_name='contentrelationship',
            name='published_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_contentrelationship_published_by', to=settings.AUTH_USER_MODEL),
        ),
    ]
